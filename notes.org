* TODO convert build, submit, poll separate loops into concurrent build/submit, poll functions
  - build is fine on its own for small sets, but building larger jobs and numbers of jobs could be bad
  - some work on this already but maybe trying to do too much at once
  - just focus on replicating current functionality with channels between concurrent routines

* TODO modularize and slot in go-cart as an option
  - Optimization is a step for SIC but assumed already done in go-cart
    - this doesnt have to be true, the geometry for go-cart has to be optimized at some point
    - add switch for optimizing with go-cart, for now assume no opt for it
  - Require molpro.in for go-cart as well instead of embedded template
    
* TODO make submit return job number for qstat checking
* TODO use qstat checking before resubmit
* TODO default input parameters 
  - probably before ParseInfile and then overwrite with what's present there
* TODO WhichCluster should probably be part of parseinfile
  - defaults should probably be part of that as well actually

* DONE how/when to handle num disps? 
** need to generate bottom of anpass.in after adding column to make work for hco/lin3atomics
  - non-problem, saves time for linear triatomics, but these are fast anyway
    - use freqs intder.in header for hco+ and I guess the other linears
  - have to use anp2int.awk to generate intder coordinates from an anpass file
  - also have to make sure anpass has the same number of variables as intder
    - ie degenerate x and y bends are treated as one in anpass the old way
      - and then duplicated in the final intder file manually
    - manual intervention required for now

* DONE Problem with sequoia freq associated with reading zmat from log file
  - it was reading the CCSD(t)-F12b energy line before the optimization finished
    - reporting job finished when it was still running
  - cannot replicate locally
  - potentially reading the log file before it's finished being written?
  - just skip freq if zmat is nil for now

* DONE need way to specify atom ordering in transition from molpro to intder
  - leave intder geometry in as template for this
  - sort by all fields in xyz coords to emulate what intder expects
  - problem randomly matching atom order to coordinates
    - H O O H for example if you flip the Os or Hs

** DONE if transform fails, try exchanging columns to fix it
   - molpro put my al2o2 in a different plane when setting one angle to 90.0
   - this broke the transform because the pattern didnt match
** WAIT also might need to be robust to slight variations in the coords
   - I think this is handled, but wait and see
   - ie not a perfect tie

* TODO resume from each point of the process
  - pts, freqs mainly; if opt fails need to restart and if freq fails just run that

* WAIT figure out a better way to handle templates
  - I think the current approach is okay - eventually shrink to only a molpro input file
    - the intder, anpass, and spectro should be generated
  - moved away from go templates but now using "template" input files
  - could bundle literals with the program and use others if found in the input file

* TODO use taylor.py internals to write anpass and intder files
  - only includes bottom of intder file, top falls under the hard one below
  - could write entire anpass from scratch though

* TODO automate internal coordinate generation                         :HARD:

* TODO replace intder, anpass, and spectro entirely                    :HARD:
